{"version":3,"sources":["components/card/CardComponent.jsx","components/card-list/CardList.jsx","components/search-box/Searchbox.jsx","App.js","reportWebVitals.js","index.js"],"names":["CardComponent","props","className","src","monsters","id","alt","name","email","CardList","map","Searchbox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","searchFields","fetch","then","response","json","users","this","filteredMonsters","filter","monster","toLocaleLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAeeA,MAbf,SAAuBC,GACrB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAG,+BAA0BF,EAAMG,SAASC,GAAzC,0BACHC,IAAI,aAEN,mCAAML,EAAMG,SAASG,QACrB,kCAAKN,EAAMG,SAASI,a,MCKXC,MAXf,SAAkBR,GAEhB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMG,SAASM,KAAI,SAACN,GAAD,OAClB,cAAC,EAAD,CAAiCA,SAAUA,EAA3C,cAAoBA,EAASC,U,MCQtBM,MAdf,YAAmD,IAA9BC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,aAChC,OACE,uBACEX,UAAU,SACVY,KAAK,SACLF,YAAaA,EAEbG,SAAUF,KCsCDG,G,wDAzCb,aAAe,IAAD,8BACZ,gBAkBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAjBtC,EAAKC,MAAQ,CACXlB,SAAU,GACVmB,aAAc,IALJ,E,qDAad,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKV,SAAS,CAAEd,SAAUwB,S,oBAM/C,WACE,MAAkCC,KAAKP,MAA/BlB,EAAR,EAAQA,SAAUe,EAAlB,EAAkBA,YACZW,EAAmB1B,EAAS2B,QAAO,SAACC,GAAD,OAEvCA,EAAQzB,KAAK0B,oBAAoBC,SAASf,EAAYc,wBAExD,OACE,sBAAK/B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACEU,YAAY,iBACZC,aAAcgB,KAAKhB,eAErB,cAAC,EAAD,CAAUT,SAAU0B,W,GApCVK,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.41da8fbb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.styles.css\";\r\nfunction CardComponent(props) {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        src={`https://robohash.org/${props.monsters.id}?set=set4&size=300x300`}\r\n        alt=\"monsters\"\r\n      />\r\n      <h2> {props.monsters.name}</h2>\r\n      <p> {props.monsters.email}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardComponent;\r\n","import React from \"react\";\r\nimport CardComponent from \"../card/CardComponent\";\r\nimport \"./card-list.styles.css\";\r\n\r\nfunction CardList(props) {\r\n  // console.log(props)\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.monsters.map((monsters) => (\r\n        <CardComponent key={monsters.id} monsters={monsters}> </CardComponent>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport \"./search-box.styles.css\";\r\n\r\nfunction Searchbox({ placeholder, handleChange }) {\r\n  return (\r\n    <input\r\n      className=\"search\"\r\n      type=\"search\"\r\n      placeholder={placeholder}\r\n      // trigerred when typing something\r\n      onChange={handleChange}\r\n      // onChange={(e) => this.setState({ searchField: e.target.value })}\r\n      // console.log(this.state)\r\n    />\r\n  );\r\n}\r\n\r\nexport default Searchbox;\r\n","import React, { Component } from \"react\";\nimport CardList from \"./components/card-list/CardList\";\nimport Searchbox from \"./components/search-box/Searchbox\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchFields: \"\",\n    };\n\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  // using the didMount for fetching api from placeholders\n  // call the state of monster from users\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      // ini terkadang error\n      monster.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1> Kitten Rolodex</h1>\n        <Searchbox\n          placeholder=\"Search Kittens\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}